read_xlsx("www/example_course_file.xlsx",skip = 1) %>%
  prepare_data() %>%
  filter(!is.na(stime)) %>%
  mutate(dur=etime-stime)%>%
  arrange(day,stime,desc(dur),etime) %>%
  mutate(col=NA) %>%
  mutate(column_grp=NA)%>%
  filter(day=="T") -> d

## d sorted by stime, desc(dur), and etime

tibble(   day = "M",
          stime = sample(1:10, 20, replace = T),
          #etime = c(10, 10, 11, 12, 12, 12)
          ) %>%
    mutate(etime = stime + sample(1:3, 20, replace = T)) %>%
    mutate(dur = etime - stime) %>%
    arrange(stime, desc(dur), etime) %>%
    mutate(col = 0, 
            cluster = 0,
            name = as.character(1:20)) -> d


## second pass to expand events to the right
expand_events <- function(d) {
    d <- mutate(d, col_r = col + 1)

    for (i in seq_along(d$col)) {
        for (j in seq_along(d$col)) {
            if (d$col[j] >  d$col[i] & d$stime[i] >= d$etime[j]) { #look for collisions in columns to the right of i
                d$col_r[i] <- d$col_r[i] + 1 # if there is no collision, expand into empty column to the right
            }
        }
    }
  return(d)
}



d <- find_clusters(d)
d
d |>
    filter(cluster == 1) -> s
place_events(d) %>% 
    ggplot() +
    geom_rect(
        aes(
            xmin = col,
            xmax = col + 0.9,
            ymin = stime,
            ymax = etime,
            fill = name
        ),
        alpha = 0.4,
        color = "black"
    ) +
    scale_y_reverse() -> sched
    ggplotly(sched)



### genetic algorithim functions below 

collides_event <- function(a, b) {
    # a and b are rows of the data frame
    y_collision <- a$y_min < b$y_max & a$y_max > b$y_min
    x_collision <- a$x_min < b$x_max & a$x_max > b$x_min

    return(c(y = y_collision, x = x_collision))
}

collides_border <- function(a) {
    return(a$x_min < 0 || a$x_max > 1)
}

event_area <- function(d) {
    event_area <- (d$y_max - d$y_min) * (d$x_max - d$x_min)
    sum_event_area <- sum(event_area)
    whole_area <- sum(max(d$y_max) - min(d$y_min))
    return(list(event_area, sum_event_area, whole_area))
}


read_xlsx("www/example_course_file_full.xlsx") %>% 
    prepare_data() %>% 
    prepare_plot_data() %>% 
    plot_schedule(., fill = course)





times <- c(str_c(1:11, " AM"), "12 PM", str_c(1:11, " PM"))

ggplot(prepd) +
    geom_rect(
      aes(
        xmin = x1,
        xmax = x2,
        ymax = etime,
        ymin = stime,
        fill = course,
        group = course
    ), 
    alpha = 0.6, 
    color = "black") +
    geom_text(
      aes(
        x = x1,
        y = (stime + abs(stime - etime) / 2),
        label = course,
        size = (x2 - x1) * 100
      ),
      hjust = 0,
      vjust = 0.5,
      nudge_x = 0.01
    ) +
    scale_size_area(max_size = 4) +
    scale_y_reverse(breaks = 1:23,
                    labels = times) +
theme(
      legend.position = "none",
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.text.x = element_blank()
    ) +
    xlab("") +
    ylab("") +
    guides(fill = FALSE) +
    facet_grid(campus ~ day) -> sched

ggplotly(sched)    


